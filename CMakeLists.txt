cmake_minimum_required(VERSION 2.8)

PROJECT(dmfunction)

IF (WIN32)  
    MESSAGE(STATUS "Now is windows")

    SET(DMOS_NAME "win")

    SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11" )    
ELSEIF (APPLE)  
    MESSAGE(STATUS "Now is Apple systems")  

    SET(DMOS_NAME "mac") 

    SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -pthread" )
ELSEIF (UNIX)  
    MESSAGE(STATUS "Now is UNIX-like OS")  
 
    SET(DMOS_NAME "lin") 
    
    SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -pthread" )    
ENDIF ()

add_definitions(-D__STDC_LIMIT_MACROS)
add_definitions(-D__STDC_CONSTANT_MACROS)
add_definitions(-D__STDC_FORMAT_MACROS)
 

SET(CMAKE_CXX_STANDARD 11)
SET(LLVM_HOME /opt/llvm)

FIND_PACKAGE(LLVM)
FIND_PACKAGE(CLANG)

MESSAGE(STATUS ${LLVM_DEFINITIONS})
MESSAGE(STATUS ${CLANG_DEFINITIONS})
MESSAGE(STATUS ${LLVM_INCLUDE_DIRS})
MESSAGE(STATUS ${CLANG_INCLUDE_DIRS})
MESSAGE(STATUS ${LLVM_LIBS})
MESSAGE(STATUS ${CLANG_LIBS})

add_definitions(${LLVM_DEFINITIONS})

add_definitions(${CLANG_DEFINITIONS})

INCLUDE_DIRECTORIES(${LLVM_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${CLANG_INCLUDE_DIRS})

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src)

LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/lib/${DMOS_NAME})

SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib/${DMOS_NAME})

FILE(GLOB SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/src/MetaGen.cc)

ADD_EXECUTABLE(dmfunctiontest ${SOURCES})
TARGET_LINK_LIBRARIES(dmfunctiontest ${LLVM_LIBS} ${CLANG_LIBS})
